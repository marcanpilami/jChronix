<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.oxymores.chronix</groupId>
	<artifactId>chronix-parent</artifactId>
	<version>0.9.2-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>chronix-parent</name>
	<url>http://www.oxymores.org</url>

	<properties>
		<maven.jar.version>2.6</maven.jar.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<slf4j.version>1.7.12</slf4j.version>
		<junit.version />
		<joda.version>2.8.1</joda.version>
		<commonio.version>2.4</commonio.version>
		<bnd.version>3.1.0</bnd.version>
		<activemq.version>5.13.0</activemq.version>
		<hsqldb.version>2.3.3</hsqldb.version>
		<validator.version>5.2.2.Final</validator.version>
		<xstream.version>1.4.8</xstream.version>
		<felix.version>5.4.0</felix.version>

		<!-- Sonar coverage -->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
		<sonar.language>java</sonar.language>
	</properties>

	<scm>
		<developerConnection>scm:git:git@github.com:marcanpilami/jChronix.git</developerConnection>
		<connection>scm:git:https://github.com/marcanpilami/jChronix.git</connection>
		<url>https://github.com/marcanpilami/jChronix</url>
		<tag>HEAD</tag>
	</scm>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.5.2</version>
				<configuration>
					<!-- Only use local Git repository, push will be manual -->
					<localCheckout>true</localCheckout>
					<pushChanges>false</pushChanges>
					<!-- Only install - no pushing to a Maven repository (default is deploy) -->
					<goals>install</goals>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.6.201602180812</version>
				<configuration>
					<destFile>${sonar.jacoco.reportPath}</destFile>
					<append>true</append>
				</configuration>
				<executions>
					<execution>
						<id>agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!-- Needed to avoid Maven JAR plugin replacing the manifest generated 
					by the OSGI plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<configuration>
						<useDefaultManifestFile>true</useDefaultManifestFile>
					</configuration>
				</plugin>

				<!-- Helper for OSGI bundles: always copy libraries, so bundles can choose 
					to copy them or not -->
				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<executions>
						<execution>
							<phase>prepare-package</phase>
							<goals>
								<goal>copy-dependencies</goal>
							</goals>
							<configuration>
								<outputDirectory>${project.build.directory}/lib</outputDirectory>
								<includeScope>compile</includeScope>
								<excludeGroupIds>org.osgi</excludeGroupIds>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<modules>
		<module>chronix-doc</module>
		<module>chronix-core</module>
		<!-- <module>chronix-launcher</module> -->
		<module>chronix-cli</module>
		<module>chronix-plugin-api</module>
		<module>chronix-source-chain</module>
		<module>chronix-nonosgilibs</module>
		<!-- <module>chronix-web-core</module> -->
		<module>chronix-package</module>
		<module>chronix-integration-tests</module>
		<module>chronix-agent-command</module>
		<module>chronix-agent-command-shell</module>
		<module>chronix-source-basic</module>
	</modules>
</project>